import pygame
import random

# Inizializzazione di Pygame
pygame.init()

# Definizione dei colori
nero = (0, 0, 0)
bianco = (255, 255, 255)

# Impostazioni dello schermo
larghezza = 800
altezza = 600
dimensioni_blocco = 20

# Caricamento dell'immagine della mela e del bonus
mela_img = pygame.Surface((dimensioni_blocco, dimensioni_blocco))
mela_img.fill((255, 0, 0))  # Colore rosso per la mela
bonus_img = pygame.Surface((dimensioni_blocco, dimensioni_blocco))
bonus_img.fill((0, 255, 0))  # Colore verde per il bonus

# Inizializzazione dello schermo
schermo = pygame.display.set_mode((larghezza, altezza))
pygame.display.set_caption("Snake")

# Font per il testo
font = pygame.font.SysFont(None, 36)

# Orologio per controllare la velocità del gioco
orologio = pygame.time.Clock()

def disegna_sfondo():
    for x in range(0, larghezza, dimensioni_blocco):
        for y in range(0, altezza, dimensioni_blocco):
            if (x // dimensioni_blocco + y // dimensioni_blocco) % 3 == 1:
                colore = (0, 100, 0)  # Colore verde scuro per i quadrati alternati
            else:
                colore = (0, 150, 0)  # Colore verde chiaro per i quadrati alternati
            pygame.draw.rect(schermo, colore, [x, y, dimensioni_blocco, dimensioni_blocco])

def disegna_testa(testa):
    pygame.draw.rect(schermo, bianco, pygame.Rect(testa[0], testa[1], dimensioni_blocco, dimensioni_blocco))

def disegna_corpo(corpo):
    for blocco in corpo:
        pygame.draw.rect(schermo, bianco, pygame.Rect(blocco[0], blocco[1], dimensioni_blocco, dimensioni_blocco))

def disegna_mela(mela):
    schermo.blit(mela_img, (mela[0], mela[1]))

def disegna_bonus(bonus):
    schermo.blit(bonus_img, (bonus[0], bonus[1]))

def genera_mela():
    x = random.randrange(0, larghezza - dimensioni_blocco, dimensioni_blocco)
    y = random.randrange(0, altezza - dimensioni_blocco, dimensioni_blocco)
    return [x, y]

def genera_bonus(corpo):
    if random.randint(0, 100) < 5:  # Genera il bonus casualmente con una probabilità del 5%
        x = random.randrange(0, larghezza - dimensioni_blocco, dimensioni_blocco)
        y = random.randrange(0, altezza - dimensioni_blocco, dimensioni_blocco)
        # Assicurati che il bonus non si sovrapponga al serpente
        if [x, y] not in corpo:
            return [x, y]
    return None

def mostra_punteggio(punteggio):
    testo = font.render("Punteggio: " + str(punteggio), True, bianco)
    schermo.blit(testo, [10, 10])

def schermata_riprova(punteggio, uscita=False):
    schermo.fill(nero)
    disegna_sfondo()  # Disegna lo sfondo della griglia
    testo_punteggio = font.render("Punteggio: " + str(punteggio), True, bianco)
    testo_dimensioni_punteggio = testo_punteggio.get_rect(center=(larghezza / 2, altezza / 2))
    schermo.blit(testo_punteggio, testo_dimensioni_punteggio)
    testo_riprova = font.render("Riprova", True, bianco)
    testo_exit = font.render("Exit", True, bianco)
    testo_dimensioni_riprova = testo_riprova.get_rect(center=(larghezza / 2 - 100, altezza / 2 + 50))
    testo_dimensioni_exit = testo_exit.get_rect(center=(larghezza / 2 + 100, altezza / 2 + 50))
    schermo.blit(testo_riprova, testo_dimensioni_riprova)
    schermo.blit(testo_exit, testo_dimensioni_exit)
    if uscita:
        testo_grazie = font.render("Grazie per aver giocato!", True, bianco)
        testo_grazie_dimensioni = testo_grazie.get_rect(center=(larghezza / 2, altezza / 2 + 100))
        schermo.blit(testo_grazie, testo_grazie_dimensioni)
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if testo_dimensioni_riprova.collidepoint(mouse_pos):
                    return "riprova"
                elif testo_dimensioni_exit.collidepoint(mouse_pos):
                    return "exit"

def gioco():
    testa = [larghezza / 2, altezza / 2]
    corpo = [[testa[0] - dimensioni_blocco, testa[1]],
             [testa[0] - (2 * dimensioni_blocco), testa[1]]]
    direzione = 'RIGHT'
    cambio_direzione = direzione
    punteggio = 0
    mela = genera_mela()
    bonus = None
    immortale = False
    immortale_timer = 0

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return punteggio
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    cambio_direzione = 'LEFT'
                elif event.key == pygame.K_RIGHT:
                    cambio_direzione = 'RIGHT'
                elif event.key == pygame.K_UP:
                    cambio_direzione = 'UP'
                elif event.key == pygame.K_DOWN:
                    cambio_direzione = 'DOWN'

        if cambio_direzione == 'LEFT' and direzione != 'RIGHT':
            direzione = cambio_direzione
        elif cambio_direzione == 'RIGHT' and direzione != 'LEFT':
            direzione = cambio_direzione
        elif cambio_direzione == 'UP' and direzione != 'DOWN':
            direzione = cambio_direzione
        elif cambio_direzione == 'DOWN' and direzione != 'UP':
            direzione = cambio_direzione

        if direzione == 'LEFT':
            testa[0] -= dimensioni_blocco
        elif direzione == 'RIGHT':
            testa[0] += dimensioni_blocco
        elif direzione == 'UP':
            testa[1] -= dimensioni_blocco
        elif direzione == 'DOWN':
            testa[1] += dimensioni_blocco

        if testa[0] < 0 or testa[0] >= larghezza or testa[1] < 0 or testa[1] >= altezza:
            return punteggio
        if testa in corpo[1:]:
            return punteggio

        corpo.insert(0, list(testa))
        if testa == mela:
            punteggio += 10
            mela = genera_mela()
            bonus = genera_bonus(corpo)  # Genera il bonus quando la mela viene mangiata
        else:
            corpo.pop()

        if bonus:
            if testa == bonus:
                punteggio += 50  # Aggiungi punteggio extra se il serpente mangia il bonus
                immortale = True  # Attiva la modalità immortale se il serpente mangia il bonus
                immortale_timer = pygame.time.get_ticks()

        if immortale and pygame.time.get_ticks() - immortale_timer >= 5000:
            immortale = False  # Disattiva la modalità immortale dopo 5 secondi

        schermo.fill(nero)
        disegna_sfondo()  # Disegna lo sfondo della griglia
        disegna_mela(mela)
        if bonus:
            disegna_bonus(bonus)
        disegna_testa(testa)
        disegna_corpo(corpo)
        mostra_punteggio(punteggio)
        pygame.display.update()
        orologio.tick(15 + punteggio // 10)

def riprova():
    while True:
        punteggio = gioco()
        scelta = schermata_riprova(punteggio)
        if scelta == "exit":
            schermata_riprova(punteggio, uscita=True)
            pygame.time.delay(1000)  # Attendere 1 secondo prima di uscire
            pygame.quit()
            quit()

riprova()
